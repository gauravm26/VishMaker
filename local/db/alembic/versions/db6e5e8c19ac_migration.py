"""Migration

Revision ID: db6e5e8c19ac
Revises: a0c23f7b0e56
Create Date: 2025-04-05 21:16:07.262741

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import time
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = 'db6e5e8c19ac'
down_revision: Union[str, None] = 'a0c23f7b0e56'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Step 1: Add columns as nullable first
    op.add_column('high_level_requirements', sa.Column('uiid', sa.String(length=255), nullable=True))
    op.add_column('low_level_requirements', sa.Column('uiid', sa.String(length=255), nullable=True))
    op.add_column('test_cases', sa.Column('uiid', sa.String(length=255), nullable=True))
    op.add_column('user_flows', sa.Column('uiid', sa.String(length=255), nullable=True))
    
    # Step 2: Update existing rows with generated UIIDs
    conn = op.get_bind()
    
    # Function to generate a timestamp string
    def get_timestamp():
        return format(int(time.time() * 1000), 'x')[-6:]
    
    # Update user_flows
    results = conn.execute(text("SELECT id FROM user_flows WHERE uiid IS NULL"))
    for row in results:
        id = row[0]
        uiid = f"usf_{id}_{get_timestamp()}"
        conn.execute(text(f"UPDATE user_flows SET uiid = '{uiid}' WHERE id = {id}"))
    
    # Update high_level_requirements
    results = conn.execute(text("SELECT id FROM high_level_requirements WHERE uiid IS NULL"))
    for row in results:
        id = row[0]
        uiid = f"hir_{id}_{get_timestamp()}"
        conn.execute(text(f"UPDATE high_level_requirements SET uiid = '{uiid}' WHERE id = {id}"))
    
    # Update low_level_requirements
    results = conn.execute(text("SELECT id FROM low_level_requirements WHERE uiid IS NULL"))
    for row in results:
        id = row[0]
        uiid = f"lor_{id}_{get_timestamp()}"
        conn.execute(text(f"UPDATE low_level_requirements SET uiid = '{uiid}' WHERE id = {id}"))
    
    # Update test_cases
    results = conn.execute(text("SELECT id FROM test_cases WHERE uiid IS NULL"))
    for row in results:
        id = row[0]
        uiid = f"tes_{id}_{get_timestamp()}"
        conn.execute(text(f"UPDATE test_cases SET uiid = '{uiid}' WHERE id = {id}"))
    
    # Step 3: Set NOT NULL constraint
    op.alter_column('user_flows', 'uiid', nullable=False)
    op.alter_column('high_level_requirements', 'uiid', nullable=False)
    op.alter_column('low_level_requirements', 'uiid', nullable=False)
    op.alter_column('test_cases', 'uiid', nullable=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_flows', 'uiid')
    op.drop_column('test_cases', 'uiid')
    op.drop_column('low_level_requirements', 'uiid')
    op.drop_column('high_level_requirements', 'uiid')
    # ### end Alembic commands ###
