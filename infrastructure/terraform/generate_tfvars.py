#!/usr/bin/env python3
"""
Generate terraform.tfvars from global/config.json
This script reads the essential infrastructure configuration from config.json and generates
a terraform.tfvars file with sensible defaults for all other variables.
"""

import json
import os
import sys
from pathlib import Path

# Define paths relative to the script location
script_dir = os.path.dirname(os.path.abspath(__file__))
config_path = os.path.join(script_dir, '..', '..', 'global', 'config.json')
tfvars_path = os.path.join(script_dir, 'terraform.tfvars')

def load_config():
    """Load configuration from global/config.json"""
    
    if not Path(config_path).exists():
        print(f"❌ Error: Config file not found at {config_path}")
        sys.exit(1)
    
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        return config
    except json.JSONDecodeError as e:
        print(f"❌ Error: Invalid JSON in config file: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Error reading config file: {e}")
        sys.exit(1)

def generate_tfvars(config):
    """Generate terraform.tfvars content from config with sensible defaults"""

    # Extract infrastructure config
    infra = config.get("infrastructure", {})
    
    # Extract LLM config
    llm_config = config.get("llm", {})

    # Only require these essential values from user
    required_vars = {
        "project_name": infra.get("project_name", "vishmaker"),
        "environment": infra.get("environment", "dev"),
        "aws_region": infra.get("aws_region", "us-east-1"),
        "domain_name": infra.get("domain_name", ""),
        "cloudfront_distribution_id": infra.get("cloudfront_distribution_id", ""),
        "openai_api_key": llm_config.get("openai_api_key", "")
    }

    # Validate required fields
    if not required_vars["domain_name"] or required_vars["domain_name"] == "yourdomain.com":
        raise ValueError("`domain_name` must be set in global/config.json")
        
    if not required_vars["cloudfront_distribution_id"] or required_vars["cloudfront_distribution_id"] == "E1234567890123":
        raise ValueError("`cloudfront_distribution_id` must be set in global/config.json")

    # Content for terraform.tfvars
    tfvars_content = f"""# Generated from global/config.json
# Do not edit this file directly - modify global/config.json instead

# Basic Configuration (from config.json)
project_name                 = "{required_vars['project_name']}"
environment                  = "{required_vars['environment']}"
aws_region                   = "{required_vars['aws_region']}"

# Domain Configuration (from config.json)
domain_name                  = "{required_vars['domain_name']}"
cloudfront_distribution_id   = "{required_vars['cloudfront_distribution_id']}"

# LLM Configuration (from config.json)
openai_api_key              = "{required_vars['openai_api_key']}"

# Infrastructure Defaults (automatically configured)
cloudfront_price_class = "PriceClass_100"

# VPC Configuration (sensible defaults)
vpc_cidr                = "10.0.0.0/16"
public_subnet_cidrs     = ["10.0.1.0/24", "10.0.2.0/24"]
"""
    return tfvars_content

def write_tfvars(content):
    """Write terraform.tfvars file"""
    
    try:
        with open(tfvars_path, 'w') as f:
            f.write(content)
        print(f"✅ Generated terraform.tfvars successfully at {tfvars_path}")
        return True
    except Exception as e:
        print(f"❌ Error writing terraform.tfvars: {e}")
        return False

def main():
    """Main function to generate terraform.tfvars"""
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)

        tfvars = generate_tfvars(config)

        with open(tfvars_path, 'w') as f:
            f.write(tfvars)

        print(f"✅ Successfully generated terraform.tfvars from {config_path}")
        print("\n--- Summary of Defaults ---")
        print("CloudFront Price Class: PriceClass_100")
        print("VPC CIDR: 10.0.0.0/16")
        print("Public Subnets: ['10.0.1.0/24', '10.0.2.0/24']")
        print("---------------------------\n")
        
    except FileNotFoundError:
        print(f"❌ Error: {config_path} not found.")
        print("   Please ensure you are running this script from the correct directory.")
    except (ValueError, KeyError) as e:
        print(f"❌ Error: {e}")
        print("   Please check the structure and values in your global/config.json file.")

if __name__ == "__main__":
    main() 