# features/project_management/api/schemas.py
from pydantic import BaseModel, ConfigDict
from typing import Optional, List
from datetime import datetime

# --- Base Schema ---
# Common fields, useful for inheritance
class ProjectBase(BaseModel):
    name: str
    initial_prompt: Optional[str] = None

# --- Schema for Creation Request ---
# Inherits from Base, used for POST request body
# No 'id' or 'created_at'/'updated_at' as these are generated by the DB/server
class ProjectCreate(ProjectBase):
    pass # No extra fields needed for creation beyond the base

# --- Schema for Update Request ---
# Inherits from Base, all fields optional for partial updates (PATCH)
# We might not implement PATCH immediately, but good to define
class ProjectUpdate(ProjectBase):
    name: Optional[str] = None # Make fields optional for updates
    initial_prompt: Optional[str] = None

# --- Schema for Response Model ---
# This is what the API will return (e.g., in GET requests)
# Includes fields generated by the database (id, created_at, updated_at)
class Project(ProjectBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None # May be null if never updated

    # Pydantic V2 uses model_config instead of Config class
    # Tells Pydantic to allow mapping from ORM model attributes
    model_config = ConfigDict(from_attributes=True)

# Optional: Schema for a list response
class ProjectListResponse(BaseModel):
    projects: List[Project]
    total: int
